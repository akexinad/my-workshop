/* eslint-disable */

// source: Protobuf/element.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Protobuf_Geometry_pb = require('./geometry_pb.js');
goog.object.extend(proto, Protobuf_Geometry_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.element.Attribute', null, global);
goog.exportSymbol('proto.element.Attribute.KindCase', null, global);
goog.exportSymbol('proto.element.Envelope', null, global);
goog.exportSymbol('proto.element.Envelope.Type', null, global);
goog.exportSymbol('proto.element.Feature', null, global);
goog.exportSymbol('proto.element.Feature.KindCase', null, global);
goog.exportSymbol('proto.element.Flow', null, global);
goog.exportSymbol('proto.element.Forest', null, global);
goog.exportSymbol('proto.element.Graph', null, global);
goog.exportSymbol('proto.element.Group', null, global);
goog.exportSymbol('proto.element.Group.Type', null, global);
goog.exportSymbol('proto.element.Guid', null, global);
goog.exportSymbol('proto.element.Movement', null, global);
goog.exportSymbol('proto.element.Node', null, global);
goog.exportSymbol('proto.element.Path', null, global);
goog.exportSymbol('proto.element.Path.Type', null, global);
goog.exportSymbol('proto.element.Position', null, global);
goog.exportSymbol('proto.element.Position.Type', null, global);
goog.exportSymbol('proto.element.Region', null, global);
goog.exportSymbol('proto.element.Region.Type', null, global);
goog.exportSymbol('proto.element.Space', null, global);
goog.exportSymbol('proto.element.Space.Type', null, global);
goog.exportSymbol('proto.element.Space.Use', null, global);
goog.exportSymbol('proto.element.Tree', null, global);
goog.exportSymbol('proto.element.Units', null, global);
goog.exportSymbol('proto.element.Vertex', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Guid = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Guid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Guid.displayName = 'proto.element.Guid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Envelope = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Envelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Envelope.displayName = 'proto.element.Envelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Space = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Space, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Space.displayName = 'proto.element.Space';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Region = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Region, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Region.displayName = 'proto.element.Region';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Position = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Position.displayName = 'proto.element.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Path = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Path.displayName = 'proto.element.Path';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Group = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Group.displayName = 'proto.element.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Movement = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Movement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Movement.displayName = 'proto.element.Movement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Flow = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.element.Flow.repeatedFields_, null);
};
goog.inherits(proto.element.Flow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Flow.displayName = 'proto.element.Flow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Node = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.element.Node.repeatedFields_, null);
};
goog.inherits(proto.element.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Node.displayName = 'proto.element.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Tree = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Tree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Tree.displayName = 'proto.element.Tree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Forest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.element.Forest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Forest.displayName = 'proto.element.Forest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Feature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.element.Feature.repeatedFields_, proto.element.Feature.oneofGroups_);
};
goog.inherits(proto.element.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Feature.displayName = 'proto.element.Feature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Attribute = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.element.Attribute.oneofGroups_);
};
goog.inherits(proto.element.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Attribute.displayName = 'proto.element.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Graph = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.element.Graph.repeatedFields_, null);
};
goog.inherits(proto.element.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Graph.displayName = 'proto.element.Graph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.element.Vertex = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.element.Vertex.repeatedFields_, null);
};
goog.inherits(proto.element.Vertex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.element.Vertex.displayName = 'proto.element.Vertex';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Guid.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Guid.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Guid} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Guid.toObject = function (includeInstance, msg) {
    var f, obj = {
      value: jspb.Message.getFieldWithDefault(msg, 1, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Guid}
 */
proto.element.Guid.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Guid;
  return proto.element.Guid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Guid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Guid}
 */
proto.element.Guid.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Guid.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Guid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Guid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Guid.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.element.Guid.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Guid} returns this
 */
proto.element.Guid.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Envelope.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Envelope.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Envelope} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Envelope.toObject = function (includeInstance, msg) {
    var f, obj = {
      geometry: (f = msg.getGeometry()) && Protobuf_Geometry_pb.Solid.toObject(includeInstance, f),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Envelope}
 */
proto.element.Envelope.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Envelope;
  return proto.element.Envelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Envelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Envelope}
 */
proto.element.Envelope.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new Protobuf_Geometry_pb.Solid;
        reader.readMessage(value, Protobuf_Geometry_pb.Solid.deserializeBinaryFromReader);
        msg.setGeometry(value);
        break;
      case 2:
        var value = /** @type {!proto.element.Envelope.Type} */ (reader.readEnum());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Envelope.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Envelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Envelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Envelope.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Protobuf_Geometry_pb.Solid.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.element.Envelope.Type = {
  UNKNOWN: 0,
  UNSPECIFIED: 1,
  PODIUM: 3,
  TOWER: 4
};

/**
 * optional geometry.Solid geometry = 1;
 * @return {?proto.geometry.Solid}
 */
proto.element.Envelope.prototype.getGeometry = function () {
  return /** @type{?proto.geometry.Solid} */ (
    jspb.Message.getWrapperField(this, Protobuf_Geometry_pb.Solid, 1));
};


/**
 * @param {?proto.geometry.Solid|undefined} value
 * @return {!proto.element.Envelope} returns this
*/
proto.element.Envelope.prototype.setGeometry = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Envelope} returns this
 */
proto.element.Envelope.prototype.clearGeometry = function () {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Envelope.prototype.hasGeometry = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.element.Envelope.Type}
 */
proto.element.Envelope.prototype.getType = function () {
  return /** @type {!proto.element.Envelope.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.element.Envelope.Type} value
 * @return {!proto.element.Envelope} returns this
 */
proto.element.Envelope.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Space.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Space.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Space} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Space.toObject = function (includeInstance, msg) {
    var f, obj = {
      geometry: (f = msg.getGeometry()) && Protobuf_Geometry_pb.Prism.toObject(includeInstance, f),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0),
      use: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Space}
 */
proto.element.Space.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Space;
  return proto.element.Space.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Space} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Space}
 */
proto.element.Space.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new Protobuf_Geometry_pb.Prism;
        reader.readMessage(value, Protobuf_Geometry_pb.Prism.deserializeBinaryFromReader);
        msg.setGeometry(value);
        break;
      case 2:
        var value = /** @type {!proto.element.Space.Type} */ (reader.readEnum());
        msg.setType(value);
        break;
      case 3:
        var value = /** @type {!proto.element.Space.Use} */ (reader.readEnum());
        msg.setUse(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Space.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Space.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Space} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Space.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Protobuf_Geometry_pb.Prism.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUse();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.element.Space.Type = {
  UNKNOWN: 0,
  APARTMENT: 1,
  COMPARTMENT: 2,
  BEDROOM: 3,
  FLOOR: 4,
  PARKING: 5,
  FOO: 6
};

/**
 * @enum {number}
 */
proto.element.Space.Use = {
  UNCERTAIN: 0,
  NONSPECIFIC: 1,
  MIXED: 2,
  RESIDENTIAL: 3,
  COMMERCIAL: 4,
  RETAIL: 5,
  COMMUNITY: 6,
  HOTEL: 7
};

/**
 * optional geometry.Prism geometry = 1;
 * @return {?proto.geometry.Prism}
 */
proto.element.Space.prototype.getGeometry = function () {
  return /** @type{?proto.geometry.Prism} */ (
    jspb.Message.getWrapperField(this, Protobuf_Geometry_pb.Prism, 1));
};


/**
 * @param {?proto.geometry.Prism|undefined} value
 * @return {!proto.element.Space} returns this
*/
proto.element.Space.prototype.setGeometry = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Space} returns this
 */
proto.element.Space.prototype.clearGeometry = function () {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Space.prototype.hasGeometry = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.element.Space.Type}
 */
proto.element.Space.prototype.getType = function () {
  return /** @type {!proto.element.Space.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.element.Space.Type} value
 * @return {!proto.element.Space} returns this
 */
proto.element.Space.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Use use = 3;
 * @return {!proto.element.Space.Use}
 */
proto.element.Space.prototype.getUse = function () {
  return /** @type {!proto.element.Space.Use} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.element.Space.Use} value
 * @return {!proto.element.Space} returns this
 */
proto.element.Space.prototype.setUse = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Region.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Region.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Region} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Region.toObject = function (includeInstance, msg) {
    var f, obj = {
      geometry: (f = msg.getGeometry()) && Protobuf_Geometry_pb.Shape.toObject(includeInstance, f),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Region}
 */
proto.element.Region.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Region;
  return proto.element.Region.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Region} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Region}
 */
proto.element.Region.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new Protobuf_Geometry_pb.Shape;
        reader.readMessage(value, Protobuf_Geometry_pb.Shape.deserializeBinaryFromReader);
        msg.setGeometry(value);
        break;
      case 2:
        var value = /** @type {!proto.element.Region.Type} */ (reader.readEnum());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Region.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Region.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Region} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Region.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Protobuf_Geometry_pb.Shape.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.element.Region.Type = {
  UNKNOWN: 0,
  UNSPECIFIED: 1,
  SITE: 2,
  FOOTPRINT: 3,
  OPENSPACE: 4,
  PARKINGLOT: 5
};

/**
 * optional geometry.Shape geometry = 1;
 * @return {?proto.geometry.Shape}
 */
proto.element.Region.prototype.getGeometry = function () {
  return /** @type{?proto.geometry.Shape} */ (
    jspb.Message.getWrapperField(this, Protobuf_Geometry_pb.Shape, 1));
};


/**
 * @param {?proto.geometry.Shape|undefined} value
 * @return {!proto.element.Region} returns this
*/
proto.element.Region.prototype.setGeometry = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Region} returns this
 */
proto.element.Region.prototype.clearGeometry = function () {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Region.prototype.hasGeometry = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.element.Region.Type}
 */
proto.element.Region.prototype.getType = function () {
  return /** @type {!proto.element.Region.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.element.Region.Type} value
 * @return {!proto.element.Region} returns this
 */
proto.element.Region.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Position.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Position.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Position} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Position.toObject = function (includeInstance, msg) {
    var f, obj = {
      geometry: (f = msg.getGeometry()) && Protobuf_Geometry_pb.Point.toObject(includeInstance, f),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Position}
 */
proto.element.Position.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Position;
  return proto.element.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Position}
 */
proto.element.Position.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new Protobuf_Geometry_pb.Point;
        reader.readMessage(value, Protobuf_Geometry_pb.Point.deserializeBinaryFromReader);
        msg.setGeometry(value);
        break;
      case 2:
        var value = /** @type {!proto.element.Position.Type} */ (reader.readEnum());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Position.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Position.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Protobuf_Geometry_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.element.Position.Type = {
  UNKNOWN: 0,
  UNSPECIFIED: 1,
  CENTROID: 2,
  COORDINATES: 3
};

/**
 * optional geometry.Point geometry = 1;
 * @return {?proto.geometry.Point}
 */
proto.element.Position.prototype.getGeometry = function () {
  return /** @type{?proto.geometry.Point} */ (
    jspb.Message.getWrapperField(this, Protobuf_Geometry_pb.Point, 1));
};


/**
 * @param {?proto.geometry.Point|undefined} value
 * @return {!proto.element.Position} returns this
*/
proto.element.Position.prototype.setGeometry = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Position} returns this
 */
proto.element.Position.prototype.clearGeometry = function () {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Position.prototype.hasGeometry = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.element.Position.Type}
 */
proto.element.Position.prototype.getType = function () {
  return /** @type {!proto.element.Position.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.element.Position.Type} value
 * @return {!proto.element.Position} returns this
 */
proto.element.Position.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Path.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Path.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Path} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Path.toObject = function (includeInstance, msg) {
    var f, obj = {
      geometry: (f = msg.getGeometry()) && Protobuf_Geometry_pb.Chain.toObject(includeInstance, f),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Path}
 */
proto.element.Path.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Path;
  return proto.element.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Path}
 */
proto.element.Path.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new Protobuf_Geometry_pb.Chain;
        reader.readMessage(value, Protobuf_Geometry_pb.Chain.deserializeBinaryFromReader);
        msg.setGeometry(value);
        break;
      case 2:
        var value = /** @type {!proto.element.Path.Type} */ (reader.readEnum());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Path.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Path.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Path} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Path.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Protobuf_Geometry_pb.Chain.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.element.Path.Type = {
  UNKNOWN: 0,
  UNSPECIFIED: 1,
  ROADCENTRELINE: 2,
  PARCELBOUNDARY: 3
};

/**
 * optional geometry.Chain geometry = 1;
 * @return {?proto.geometry.Chain}
 */
proto.element.Path.prototype.getGeometry = function () {
  return /** @type{?proto.geometry.Chain} */ (
    jspb.Message.getWrapperField(this, Protobuf_Geometry_pb.Chain, 1));
};


/**
 * @param {?proto.geometry.Chain|undefined} value
 * @return {!proto.element.Path} returns this
*/
proto.element.Path.prototype.setGeometry = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Path} returns this
 */
proto.element.Path.prototype.clearGeometry = function () {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Path.prototype.hasGeometry = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.element.Path.Type}
 */
proto.element.Path.prototype.getType = function () {
  return /** @type {!proto.element.Path.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.element.Path.Type} value
 * @return {!proto.element.Path} returns this
 */
proto.element.Path.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Group.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Group.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Group} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Group.toObject = function (includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Group}
 */
proto.element.Group.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Group;
  return proto.element.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Group}
 */
proto.element.Group.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.element.Group.Type} */ (reader.readEnum());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Group.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Group.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.element.Group.Type = {
  UNKNOWN: 0,
  ROOT: 1,
  PROJECT: 2,
  SCENARIO: 3,
  STRUCTURE: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.element.Group.Type}
 */
proto.element.Group.prototype.getType = function () {
  return /** @type {!proto.element.Group.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.element.Group.Type} value
 * @return {!proto.element.Group} returns this
 */
proto.element.Group.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Movement.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Movement.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Movement} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Movement.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: (f = msg.getId()) && proto.element.Guid.toObject(includeInstance, f),
      date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      units: jspb.Message.getFieldWithDefault(msg, 3, 0),
      amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Movement}
 */
proto.element.Movement.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Movement;
  return proto.element.Movement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Movement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Movement}
 */
proto.element.Movement.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.setId(value);
        break;
      case 2:
        var value = new google_protobuf_timestamp_pb.Timestamp;
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setDate(value);
        break;
      case 3:
        var value = /** @type {!proto.element.Units} */ (reader.readEnum());
        msg.setUnits(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Movement.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Movement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Movement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Movement.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUnits();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional Guid id = 1;
 * @return {?proto.element.Guid}
 */
proto.element.Movement.prototype.getId = function () {
  return /** @type{?proto.element.Guid} */ (
    jspb.Message.getWrapperField(this, proto.element.Guid, 1));
};


/**
 * @param {?proto.element.Guid|undefined} value
 * @return {!proto.element.Movement} returns this
*/
proto.element.Movement.prototype.setId = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Movement} returns this
 */
proto.element.Movement.prototype.clearId = function () {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Movement.prototype.hasId = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.element.Movement.prototype.getDate = function () {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.element.Movement} returns this
*/
proto.element.Movement.prototype.setDate = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Movement} returns this
 */
proto.element.Movement.prototype.clearDate = function () {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Movement.prototype.hasDate = function () {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Units units = 3;
 * @return {!proto.element.Units}
 */
proto.element.Movement.prototype.getUnits = function () {
  return /** @type {!proto.element.Units} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.element.Units} value
 * @return {!proto.element.Movement} returns this
 */
proto.element.Movement.prototype.setUnits = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double amount = 4;
 * @return {number}
 */
proto.element.Movement.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.element.Movement} returns this
 */
proto.element.Movement.prototype.setAmount = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.element.Flow.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Flow.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Flow.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Flow} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Flow.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: (f = msg.getId()) && proto.element.Guid.toObject(includeInstance, f),
      name: jspb.Message.getFieldWithDefault(msg, 2, ""),
      movementsList: jspb.Message.toObjectList(msg.getMovementsList(),
        proto.element.Movement.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Flow}
 */
proto.element.Flow.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Flow;
  return proto.element.Flow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Flow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Flow}
 */
proto.element.Flow.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = new proto.element.Movement;
        reader.readMessage(value, proto.element.Movement.deserializeBinaryFromReader);
        msg.addMovements(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Flow.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Flow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Flow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Flow.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMovementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.element.Movement.serializeBinaryToWriter
    );
  }
};


/**
 * optional Guid id = 1;
 * @return {?proto.element.Guid}
 */
proto.element.Flow.prototype.getId = function () {
  return /** @type{?proto.element.Guid} */ (
    jspb.Message.getWrapperField(this, proto.element.Guid, 1));
};


/**
 * @param {?proto.element.Guid|undefined} value
 * @return {!proto.element.Flow} returns this
*/
proto.element.Flow.prototype.setId = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Flow} returns this
 */
proto.element.Flow.prototype.clearId = function () {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Flow.prototype.hasId = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.element.Flow.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Flow} returns this
 */
proto.element.Flow.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Movement movements = 3;
 * @return {!Array<!proto.element.Movement>}
 */
proto.element.Flow.prototype.getMovementsList = function () {
  return /** @type{!Array<!proto.element.Movement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.element.Movement, 3));
};


/**
 * @param {!Array<!proto.element.Movement>} value
 * @return {!proto.element.Flow} returns this
*/
proto.element.Flow.prototype.setMovementsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.element.Movement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.element.Movement}
 */
proto.element.Flow.prototype.addMovements = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.element.Movement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Flow} returns this
 */
proto.element.Flow.prototype.clearMovementsList = function () {
  return this.setMovementsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.element.Node.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Node.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Node.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Node} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Node.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: (f = msg.getId()) && proto.element.Guid.toObject(includeInstance, f),
      featureid: (f = msg.getFeatureid()) && proto.element.Guid.toObject(includeInstance, f),
      parentid: (f = msg.getParentid()) && proto.element.Guid.toObject(includeInstance, f),
      childrenidsList: jspb.Message.toObjectList(msg.getChildrenidsList(),
        proto.element.Guid.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Node}
 */
proto.element.Node.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Node;
  return proto.element.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Node}
 */
proto.element.Node.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.setId(value);
        break;
      case 2:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.setFeatureid(value);
        break;
      case 3:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.setParentid(value);
        break;
      case 4:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.addChildrenids(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Node.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Node.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
  f = message.getFeatureid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
  f = message.getParentid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
  f = message.getChildrenidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
};


/**
 * optional Guid id = 1;
 * @return {?proto.element.Guid}
 */
proto.element.Node.prototype.getId = function () {
  return /** @type{?proto.element.Guid} */ (
    jspb.Message.getWrapperField(this, proto.element.Guid, 1));
};


/**
 * @param {?proto.element.Guid|undefined} value
 * @return {!proto.element.Node} returns this
*/
proto.element.Node.prototype.setId = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Node} returns this
 */
proto.element.Node.prototype.clearId = function () {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Node.prototype.hasId = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Guid featureId = 2;
 * @return {?proto.element.Guid}
 */
proto.element.Node.prototype.getFeatureid = function () {
  return /** @type{?proto.element.Guid} */ (
    jspb.Message.getWrapperField(this, proto.element.Guid, 2));
};


/**
 * @param {?proto.element.Guid|undefined} value
 * @return {!proto.element.Node} returns this
*/
proto.element.Node.prototype.setFeatureid = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Node} returns this
 */
proto.element.Node.prototype.clearFeatureid = function () {
  return this.setFeatureid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Node.prototype.hasFeatureid = function () {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Guid parentId = 3;
 * @return {?proto.element.Guid}
 */
proto.element.Node.prototype.getParentid = function () {
  return /** @type{?proto.element.Guid} */ (
    jspb.Message.getWrapperField(this, proto.element.Guid, 3));
};


/**
 * @param {?proto.element.Guid|undefined} value
 * @return {!proto.element.Node} returns this
*/
proto.element.Node.prototype.setParentid = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Node} returns this
 */
proto.element.Node.prototype.clearParentid = function () {
  return this.setParentid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Node.prototype.hasParentid = function () {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Guid childrenIds = 4;
 * @return {!Array<!proto.element.Guid>}
 */
proto.element.Node.prototype.getChildrenidsList = function () {
  return /** @type{!Array<!proto.element.Guid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.element.Guid, 4));
};


/**
 * @param {!Array<!proto.element.Guid>} value
 * @return {!proto.element.Node} returns this
*/
proto.element.Node.prototype.setChildrenidsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.element.Guid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.element.Guid}
 */
proto.element.Node.prototype.addChildrenids = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.element.Guid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Node} returns this
 */
proto.element.Node.prototype.clearChildrenidsList = function () {
  return this.setChildrenidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Tree.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Tree.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Tree} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Tree.toObject = function (includeInstance, msg) {
    var f, obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ""),
      root: (f = msg.getRoot()) && proto.element.Node.toObject(includeInstance, f),
      nodesMap: (f = msg.getNodesMap()) ? f.toObject(includeInstance, proto.element.Node.toObject) : []
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Tree}
 */
proto.element.Tree.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Tree;
  return proto.element.Tree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Tree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Tree}
 */
proto.element.Tree.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = new proto.element.Node;
        reader.readMessage(value, proto.element.Node.deserializeBinaryFromReader);
        msg.setRoot(value);
        break;
      case 3:
        var value = msg.getNodesMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.element.Node.deserializeBinaryFromReader, "", new proto.element.Node());
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Tree.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Tree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Tree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Tree.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.element.Node.serializeBinaryToWriter
    );
  }
  f = message.getNodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.element.Node.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.element.Tree.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Tree} returns this
 */
proto.element.Tree.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Node root = 2;
 * @return {?proto.element.Node}
 */
proto.element.Tree.prototype.getRoot = function () {
  return /** @type{?proto.element.Node} */ (
    jspb.Message.getWrapperField(this, proto.element.Node, 2));
};


/**
 * @param {?proto.element.Node|undefined} value
 * @return {!proto.element.Tree} returns this
*/
proto.element.Tree.prototype.setRoot = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Tree} returns this
 */
proto.element.Tree.prototype.clearRoot = function () {
  return this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Tree.prototype.hasRoot = function () {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, Node> nodes = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.element.Node>}
 */
proto.element.Tree.prototype.getNodesMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.element.Node>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.element.Node));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.element.Tree} returns this
 */
proto.element.Tree.prototype.clearNodesMap = function () {
  this.getNodesMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Forest.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Forest.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Forest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Forest.toObject = function (includeInstance, msg) {
    var f, obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ""),
      featuresMap: (f = msg.getFeaturesMap()) ? f.toObject(includeInstance, proto.element.Feature.toObject) : [],
      treesMap: (f = msg.getTreesMap()) ? f.toObject(includeInstance, proto.element.Tree.toObject) : []
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Forest}
 */
proto.element.Forest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Forest;
  return proto.element.Forest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Forest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Forest}
 */
proto.element.Forest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = msg.getFeaturesMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.element.Feature.deserializeBinaryFromReader, "", new proto.element.Feature());
        });
        break;
      case 3:
        var value = msg.getTreesMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.element.Tree.deserializeBinaryFromReader, "", new proto.element.Tree());
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Forest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Forest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Forest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Forest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.element.Feature.serializeBinaryToWriter);
  }
  f = message.getTreesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.element.Tree.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.element.Forest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Forest} returns this
 */
proto.element.Forest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, Feature> features = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.element.Feature>}
 */
proto.element.Forest.prototype.getFeaturesMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.element.Feature>} */ (
    jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.element.Feature));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.element.Forest} returns this
 */
proto.element.Forest.prototype.clearFeaturesMap = function () {
  this.getFeaturesMap().clear();
  return this;
};


/**
 * map<string, Tree> trees = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.element.Tree>}
 */
proto.element.Forest.prototype.getTreesMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.element.Tree>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.element.Tree));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.element.Forest} returns this
 */
proto.element.Forest.prototype.clearTreesMap = function () {
  this.getTreesMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.element.Feature.repeatedFields_ = [4, 5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.element.Feature.oneofGroups_ = [[101, 102, 103, 104, 105, 106]];

/**
 * @enum {number}
 */
proto.element.Feature.KindCase = {
  KIND_NOT_SET: 0,
  ENVELOPE: 101,
  SPACE: 102,
  REGION: 103,
  POSITION: 104,
  PATH: 105,
  GROUP: 106
};

/**
 * @return {proto.element.Feature.KindCase}
 */
proto.element.Feature.prototype.getKindCase = function () {
  return /** @type {proto.element.Feature.KindCase} */(jspb.Message.computeOneofCase(this, proto.element.Feature.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Feature.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Feature.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Feature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Feature.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: (f = msg.getId()) && proto.element.Guid.toObject(includeInstance, f),
      name: jspb.Message.getFieldWithDefault(msg, 2, ""),
      attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, proto.element.Attribute.toObject) : [],
      tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
      flowsList: jspb.Message.toObjectList(msg.getFlowsList(),
        proto.element.Flow.toObject, includeInstance),
      envelope: (f = msg.getEnvelope()) && proto.element.Envelope.toObject(includeInstance, f),
      space: (f = msg.getSpace()) && proto.element.Space.toObject(includeInstance, f),
      region: (f = msg.getRegion()) && proto.element.Region.toObject(includeInstance, f),
      position: (f = msg.getPosition()) && proto.element.Position.toObject(includeInstance, f),
      path: (f = msg.getPath()) && proto.element.Path.toObject(includeInstance, f),
      group: (f = msg.getGroup()) && proto.element.Group.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Feature}
 */
proto.element.Feature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Feature;
  return proto.element.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Feature}
 */
proto.element.Feature.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.element.Guid;
        reader.readMessage(value, proto.element.Guid.deserializeBinaryFromReader);
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = msg.getAttributesMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.element.Attribute.deserializeBinaryFromReader, "", new proto.element.Attribute());
        });
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.addTags(value);
        break;
      case 5:
        var value = new proto.element.Flow;
        reader.readMessage(value, proto.element.Flow.deserializeBinaryFromReader);
        msg.addFlows(value);
        break;
      case 101:
        var value = new proto.element.Envelope;
        reader.readMessage(value, proto.element.Envelope.deserializeBinaryFromReader);
        msg.setEnvelope(value);
        break;
      case 102:
        var value = new proto.element.Space;
        reader.readMessage(value, proto.element.Space.deserializeBinaryFromReader);
        msg.setSpace(value);
        break;
      case 103:
        var value = new proto.element.Region;
        reader.readMessage(value, proto.element.Region.deserializeBinaryFromReader);
        msg.setRegion(value);
        break;
      case 104:
        var value = new proto.element.Position;
        reader.readMessage(value, proto.element.Position.deserializeBinaryFromReader);
        msg.setPosition(value);
        break;
      case 105:
        var value = new proto.element.Path;
        reader.readMessage(value, proto.element.Path.deserializeBinaryFromReader);
        msg.setPath(value);
        break;
      case 106:
        var value = new proto.element.Group;
        reader.readMessage(value, proto.element.Group.deserializeBinaryFromReader);
        msg.setGroup(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Feature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Feature.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.element.Guid.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.element.Attribute.serializeBinaryToWriter);
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getFlowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.element.Flow.serializeBinaryToWriter
    );
  }
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.element.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getSpace();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.element.Space.serializeBinaryToWriter
    );
  }
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.element.Region.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.element.Position.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.element.Path.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.element.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Guid id = 1;
 * @return {?proto.element.Guid}
 */
proto.element.Feature.prototype.getId = function () {
  return /** @type{?proto.element.Guid} */ (
    jspb.Message.getWrapperField(this, proto.element.Guid, 1));
};


/**
 * @param {?proto.element.Guid|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setId = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearId = function () {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasId = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.element.Feature.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, Attribute> attributes = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.element.Attribute>}
 */
proto.element.Feature.prototype.getAttributesMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.element.Attribute>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.element.Attribute));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearAttributesMap = function () {
  this.getAttributesMap().clear();
  return this;
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.element.Feature.prototype.getTagsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.setTagsList = function (value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.addTags = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearTagsList = function () {
  return this.setTagsList([]);
};


/**
 * repeated Flow flows = 5;
 * @return {!Array<!proto.element.Flow>}
 */
proto.element.Feature.prototype.getFlowsList = function () {
  return /** @type{!Array<!proto.element.Flow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.element.Flow, 5));
};


/**
 * @param {!Array<!proto.element.Flow>} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setFlowsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.element.Flow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.element.Flow}
 */
proto.element.Feature.prototype.addFlows = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.element.Flow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearFlowsList = function () {
  return this.setFlowsList([]);
};


/**
 * optional Envelope envelope = 101;
 * @return {?proto.element.Envelope}
 */
proto.element.Feature.prototype.getEnvelope = function () {
  return /** @type{?proto.element.Envelope} */ (
    jspb.Message.getWrapperField(this, proto.element.Envelope, 101));
};


/**
 * @param {?proto.element.Envelope|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setEnvelope = function (value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.element.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearEnvelope = function () {
  return this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasEnvelope = function () {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional Space space = 102;
 * @return {?proto.element.Space}
 */
proto.element.Feature.prototype.getSpace = function () {
  return /** @type{?proto.element.Space} */ (
    jspb.Message.getWrapperField(this, proto.element.Space, 102));
};


/**
 * @param {?proto.element.Space|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setSpace = function (value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.element.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearSpace = function () {
  return this.setSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasSpace = function () {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional Region region = 103;
 * @return {?proto.element.Region}
 */
proto.element.Feature.prototype.getRegion = function () {
  return /** @type{?proto.element.Region} */ (
    jspb.Message.getWrapperField(this, proto.element.Region, 103));
};


/**
 * @param {?proto.element.Region|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setRegion = function (value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.element.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearRegion = function () {
  return this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasRegion = function () {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional Position position = 104;
 * @return {?proto.element.Position}
 */
proto.element.Feature.prototype.getPosition = function () {
  return /** @type{?proto.element.Position} */ (
    jspb.Message.getWrapperField(this, proto.element.Position, 104));
};


/**
 * @param {?proto.element.Position|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setPosition = function (value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.element.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearPosition = function () {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasPosition = function () {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional Path path = 105;
 * @return {?proto.element.Path}
 */
proto.element.Feature.prototype.getPath = function () {
  return /** @type{?proto.element.Path} */ (
    jspb.Message.getWrapperField(this, proto.element.Path, 105));
};


/**
 * @param {?proto.element.Path|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setPath = function (value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.element.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearPath = function () {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasPath = function () {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional Group group = 106;
 * @return {?proto.element.Group}
 */
proto.element.Feature.prototype.getGroup = function () {
  return /** @type{?proto.element.Group} */ (
    jspb.Message.getWrapperField(this, proto.element.Group, 106));
};


/**
 * @param {?proto.element.Group|undefined} value
 * @return {!proto.element.Feature} returns this
*/
proto.element.Feature.prototype.setGroup = function (value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.element.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Feature} returns this
 */
proto.element.Feature.prototype.clearGroup = function () {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Feature.prototype.hasGroup = function () {
  return jspb.Message.getField(this, 106) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.element.Attribute.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.element.Attribute.KindCase = {
  KIND_NOT_SET: 0,
  VALUE: 1,
  GRAPH: 2
};

/**
 * @return {proto.element.Attribute.KindCase}
 */
proto.element.Attribute.prototype.getKindCase = function () {
  return /** @type {proto.element.Attribute.KindCase} */(jspb.Message.computeOneofCase(this, proto.element.Attribute.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Attribute.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Attribute.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Attribute} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Attribute.toObject = function (includeInstance, msg) {
    var f, obj = {
      value: (f = msg.getValue()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f),
      graph: (f = msg.getGraph()) && proto.element.Graph.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Attribute}
 */
proto.element.Attribute.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Attribute;
  return proto.element.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Attribute}
 */
proto.element.Attribute.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_struct_pb.Value;
        reader.readMessage(value, google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
        msg.setValue(value);
        break;
      case 2:
        var value = new proto.element.Graph;
        reader.readMessage(value, proto.element.Graph.deserializeBinaryFromReader);
        msg.setGraph(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Attribute.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Attribute.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.element.Graph.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Value value = 1;
 * @return {?proto.google.protobuf.Value}
 */
proto.element.Attribute.prototype.getValue = function () {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 1));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.element.Attribute} returns this
*/
proto.element.Attribute.prototype.setValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.element.Attribute.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Attribute} returns this
 */
proto.element.Attribute.prototype.clearValue = function () {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Attribute.prototype.hasValue = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Graph graph = 2;
 * @return {?proto.element.Graph}
 */
proto.element.Attribute.prototype.getGraph = function () {
  return /** @type{?proto.element.Graph} */ (
    jspb.Message.getWrapperField(this, proto.element.Graph, 2));
};


/**
 * @param {?proto.element.Graph|undefined} value
 * @return {!proto.element.Attribute} returns this
*/
proto.element.Attribute.prototype.setGraph = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.element.Attribute.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.element.Attribute} returns this
 */
proto.element.Attribute.prototype.clearGraph = function () {
  return this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.element.Attribute.prototype.hasGraph = function () {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.element.Graph.repeatedFields_ = [1, 2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Graph.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Graph.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Graph} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Graph.toObject = function (includeInstance, msg) {
    var f, obj = {
      verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
        proto.element.Vertex.toObject, includeInstance),
      tagsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Graph}
 */
proto.element.Graph.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Graph;
  return proto.element.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Graph}
 */
proto.element.Graph.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.element.Vertex;
        reader.readMessage(value, proto.element.Vertex.deserializeBinaryFromReader);
        msg.addVertices(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addTags(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Graph.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Graph.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.element.Vertex.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated Vertex vertices = 1;
 * @return {!Array<!proto.element.Vertex>}
 */
proto.element.Graph.prototype.getVerticesList = function () {
  return /** @type{!Array<!proto.element.Vertex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.element.Vertex, 1));
};


/**
 * @param {!Array<!proto.element.Vertex>} value
 * @return {!proto.element.Graph} returns this
*/
proto.element.Graph.prototype.setVerticesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.element.Vertex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.element.Vertex}
 */
proto.element.Graph.prototype.addVertices = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.element.Vertex, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Graph} returns this
 */
proto.element.Graph.prototype.clearVerticesList = function () {
  return this.setVerticesList([]);
};


/**
 * repeated string tags = 2;
 * @return {!Array<string>}
 */
proto.element.Graph.prototype.getTagsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.element.Graph} returns this
 */
proto.element.Graph.prototype.setTagsList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.element.Graph} returns this
 */
proto.element.Graph.prototype.addTags = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Graph} returns this
 */
proto.element.Graph.prototype.clearTagsList = function () {
  return this.setTagsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.element.Vertex.repeatedFields_ = [3, 4, 6];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.element.Vertex.prototype.toObject = function (opt_includeInstance) {
    return proto.element.Vertex.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.element.Vertex} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.element.Vertex.toObject = function (includeInstance, msg) {
    var f, obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ""),
      expression: jspb.Message.getFieldWithDefault(msg, 2, ""),
      valuesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
      dependantsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
      initial: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
      formatsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
      description: jspb.Message.getFieldWithDefault(msg, 7, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.element.Vertex}
 */
proto.element.Vertex.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.element.Vertex;
  return proto.element.Vertex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.element.Vertex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.element.Vertex}
 */
proto.element.Vertex.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setExpression(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.addValues(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.addDependants(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setInitial(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.addFormats(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.element.Vertex.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.element.Vertex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.element.Vertex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.element.Vertex.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getDependantsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getInitial();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getFormatsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.element.Vertex.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expression = 2;
 * @return {string}
 */
proto.element.Vertex.prototype.getExpression = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setExpression = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string values = 3;
 * @return {!Array<string>}
 */
proto.element.Vertex.prototype.getValuesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setValuesList = function (value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.addValues = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.clearValuesList = function () {
  return this.setValuesList([]);
};


/**
 * repeated string dependants = 4;
 * @return {!Array<string>}
 */
proto.element.Vertex.prototype.getDependantsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setDependantsList = function (value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.addDependants = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.clearDependantsList = function () {
  return this.setDependantsList([]);
};


/**
 * optional float initial = 5;
 * @return {number}
 */
proto.element.Vertex.prototype.getInitial = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setInitial = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated string formats = 6;
 * @return {!Array<string>}
 */
proto.element.Vertex.prototype.getFormatsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setFormatsList = function (value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.addFormats = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.clearFormatsList = function () {
  return this.setFormatsList([]);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.element.Vertex.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.element.Vertex} returns this
 */
proto.element.Vertex.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.element.Units = {
  UNKNOWN: 0,
  DOLLARS: 1,
  JOULES: 2
};

goog.object.extend(exports, proto.element);
